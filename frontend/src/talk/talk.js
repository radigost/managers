/**
 * Created by user on 05.01.17.
 */
var appCtrl, tpl,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

require('../Class/player.js');

require('../Class/factories.js');

tpl = require('./talk.jade');

appCtrl = (function() {
  function appCtrl(player, NpcFactory, Restangular, q) {
    this.player = player;
    this.NpcFactory = NpcFactory;
    this.Restangular = Restangular;
    this.q = q;
    this.writeHistory = bind(this.writeHistory, this);
    this.isStatus = bind(this.isStatus, this);
    this.checkForSuccess = bind(this.checkForSuccess, this);
    this.notTheEnd = bind(this.notTheEnd, this);
    this.checkColor = bind(this.checkColor, this);
    this.fillNextArrayOfQuestions = bind(this.fillNextArrayOfQuestions, this);
    this.findAnswerForQuestion = bind(this.findAnswerForQuestion, this);
    this.update = bind(this.update, this);
    this.$routerOnActivate = bind(this.$routerOnActivate, this);
    this.gameName = "Окно переговоров";
    this.time = 100;
    this.history = [];
    this.result = {
      end: false,
      type: ""
    };
  }

  appCtrl.prototype.$routerOnActivate = function(next) {
    this.player.init();
    this.npcId = next.params.npcId;
    this.npc = this.NpcFactory(this.Restangular, this.q);
    this.npc.selectCurrent(this.npcId);
    return this.q.all([this.player.loadNodes(), this.player.loadTree(), this.npc.loadNodes(), this.npc.loadTree()]).then((function(_this) {
      return function(res) {
        return _this.update();
      };
    })(this));
  };

  appCtrl.prototype.update = function(questionId) {
    if (questionId > 1) {
      this.time -= 30;
    }
    this.findAnswerForQuestion(questionId);
    this.checkForSuccess();
    this.writeHistory();
    this.fillNextArrayOfQuestions();
    this.writeHistory();
  };

  appCtrl.prototype.findAnswerForQuestion = function(questionId) {
    var startElement;
    if (!questionId || questionId === 1) {
      startElement = _.find(this.npc.tree, 'is_start');
      questionId = startElement.id;
    }
    if (questionId) {
      this.npc.findNode(questionId);
      this.player.findCurrent(questionId);
      return this.npc.findCurrent();
    }
  };

  appCtrl.prototype.fillNextArrayOfQuestions = function() {
    if (this.isStatus('failure')) {
      this.npc.fail();
      this.player.fail();
      this.time = 0;
    } else if (this.isStatus('success')) {
      this.npc.succeed();
      this.player.succeed();
      this.time = 0;
    }
    return this.player.findNode(this.npc.current.id);
  };

  appCtrl.prototype.checkColor = function() {
    var f;
    f = "";
    if (this.isStatus('failure')) {
      f = "failure";
    }
    if (this.isStatus('success')) {
      f = "success";
    }
    return f;
  };

  appCtrl.prototype.notTheEnd = function() {
    var r;
    r = true;
    if (this.isStatus('failure') || this.isStatus('success')) {
      r = false;
    }
    return r;
  };

  appCtrl.prototype.checkForSuccess = function() {
    if (!this.npc.branch) {
      this.result.end = true;
      this.result.type = "failure";
    }
    if (this.npc.current) {
      if ((this.npc.current.type === "failure") || this.time <= 0) {
        this.result.end = true;
        this.result.type = "failure";
      }
      if (this.npc.current.type === "success") {
        this.result.end = true;
        return this.result.type = "success";
      }
    }
  };

  appCtrl.prototype.isStatus = function(name) {
    var itIs;
    itIs = false;
    if (this.result.type === name) {
      itIs = true;
    }
    return itIs;
  };

  appCtrl.prototype.writeHistory = function() {
    var inHistory;
    if (this.player.current) {
      inHistory = _.find(this.history, {
        text: this.player.current.text
      });
    }
    if (!inHistory) {
      this.history.push(this.player.current);
    }
    inHistory = _.find(this.history, {
      text: this.npc.current.text
    });
    if (!inHistory) {
      return this.history.push(this.npc.current);
    }
  };

  return appCtrl;

})();

angular.module('app').component('talk', {
  template: tpl(),
  controller: ['Player', 'NpcFactory', 'Restangular', '$q', appCtrl],
  controllerAs: 'ctrl',
  bindings: {
    $router: '<'
  }
});

// ---
// generated by coffee-script 1.9.2