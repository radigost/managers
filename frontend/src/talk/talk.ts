import * as angular from "angular";
import * as _ from "lodash";
import {Player} from "../Class/player";
import IService = restangular.IService;
import * as restangular from "restangular";
import IQService = angular.IQService;
import {Npc} from "../Class/npc";
/**
 * Created by user on 05.01.17.
 */


require('../Class/player.ts');
require('../Class/npc.ts');


var talkTpl = require('./talk.jade');

class TalkCtrl {
  static $inject = ['Player', 'Npc', 'Restangular', '$q'];
  private gameName: string;
  private time: number;
  private history: Array<any>;
  private result: {end: boolean; type: string};
  private npcId: any;
  private npc: any;
  constructor(
      public player :Player,
      public Npc:Npc,
      private Restangular:IService,
      private q:IQService
  ) {

      this.gameName = "Окно переговоров";
      this.time = 100;
      this.history = [];
      this.result = {
        end: false,
        type: ""
    };
  }

  $routerOnActivate(next) {
    this.player.init();
    this.npcId = next.params.npcId;
    this.npc = this.Npc.initNew(this.Restangular,this.q);
    this.npc.selectCurrent(this.npcId);
    return this.q.all([
        this.player.loadNodes(),
        this.player.loadTree(),
        this.npc.loadNodes(),
        this.npc.loadTree()])
        .then((res)=> { this.update(); });
  }

  update(questionId?) {
    if (questionId > 1) {
      this.time -= 30;
    }
    this.findAnswerForQuestion(questionId);
    this.checkForSuccess();
    this.writeHistory();
    this.fillNextArrayOfQuestions();
    this.writeHistory();
  }

  findAnswerForQuestion(questionId) {
    var startElement;
    if (!questionId || questionId === 1) {
      startElement = _.find(this.npc.tree, 'is_start');
      questionId = startElement.id;
    }
    if (questionId) {
      this.npc.findNode(questionId);
      this.player.findCurrent(questionId);
      return this.npc.findCurrent();
    }
  }

  fillNextArrayOfQuestions() {
    if (this.isStatus('failure')) {
      this.npc.fail();
      this.player.fail();
      this.time = 0;
    } else if (this.isStatus('success')) {
      this.npc.succeed();
      this.player.succeed();
      this.time = 0;
    }
    return this.player.findNode(this.npc.current.id);
  }

  checkColor() {
    var f;
    f = "";
    if (this.isStatus('failure')) {
      f = "failure";
    }
    if (this.isStatus('success')) {
      f = "success";
    }
    return f;
  }

  notTheEnd() {
    var r;
    r = true;
    if (this.isStatus('failure') || this.isStatus('success')) {
      r = false;
    }
    return r;
  }

  checkForSuccess() {
    if (!this.npc.branch) {
      this.result.end = true;
      this.result.type = "failure";
    }
    if (this.npc.current) {
      if ((this.npc.current.type === "failure") || this.time <= 0) {
        this.result.end = true;
        this.result.type = "failure";
      }
      if (this.npc.current.type === "success") {
        this.result.end = true;
        return this.result.type = "success";
      }
    }
  }

  isStatus(name) {
    var itIs;
    itIs = false;
    if (this.result.type === name) {
      itIs = true;
    }
    return itIs;
  }

  writeHistory() {
    var inHistory;
    if (this.player.current) {
      inHistory = _.find(this.history, {
        text: this.player.current.text
      });
    }
    if (!inHistory) {
      this.history.push(this.player.current);
    }
    inHistory = _.find(this.history, {
      text: this.npc.current.text
    });
    if (!inHistory) {
      return this.history.push(this.npc.current);
    }
  }


};




class TalkComponent implements IComponentOptions{
  bindings:any={
    $router:'<'
  };
  template:string =  talkTpl();
  controller =  TalkCtrl;
  controllerAs:string =  'ctrl';

}
angular.module('app').component('talk', new TalkComponent);

// ---
// generated by coffee-script 1.9.2