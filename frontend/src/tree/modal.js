/**
 * Created by user on 05.01.17.
 */
var modalTpl, treeModalCtrl,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

modalTpl = require('./modal.jade');

treeModalCtrl = (function() {
  function treeModalCtrl(Restangular, cookies) {
    this.Restangular = Restangular;
    this.cookies = cookies;
    this.setDefault = bind(this.setDefault, this);
    this.setSuccess = bind(this.setSuccess, this);
    this.setFailure = bind(this.setFailure, this);
    this.create = bind(this.create, this);
    this.close = bind(this.close, this);
    this["delete"] = bind(this["delete"], this);
    this.save = bind(this.save, this);
    this.cancel = bind(this.cancel, this);
    this.node = this.resolve.node;
    this.toAdd = {
      text: ""
    };
  }

  treeModalCtrl.prototype.cancel = function() {
    return this.dismiss({
      $value: 'cancel'
    });
  };

  treeModalCtrl.prototype.save = function() {
    return this.Restangular.one('/api/v1/nodes/', this.node.id).get().then((function(_this) {
      return function(res) {
        var s;
        res.choice.push(_this.selected.id);
        s = _this.cookies.getAll();
        return res.customPUT('', '', '', {
          'X-CSRFToken': s.csrftoken
        }).then(function() {
          return _this.node.answers.push(_this.selected);
        });
      };
    })(this));
  };

  treeModalCtrl.prototype["delete"] = function(id) {
    return this.Restangular.one('/api/v1/nodes/', this.node.id).get().then((function(_this) {
      return function(res) {
        var s;
        res.choice = _.pull(res.choice, id);
        s = _this.cookies.getAll();
        return res.customPUT('', '', '', {
          'X-CSRFToken': s.csrftoken
        }).then(function() {
          return _this.node.answers = _.pullAllBy(_this.node.answers, [
            {
              'id': id
            }
          ], 'id');
        });
      };
    })(this));
  };

  treeModalCtrl.prototype.close = function() {
    return this.close({
      $value: 'cancel'
    });
  };

  treeModalCtrl.prototype.create = function(text) {
    var obj, s, type;
    if (this.node.category === 'npc') {
      type = 'player';
    } else {
      type = 'npc';
    }
    console.log(this.toAdd);
    obj = {
      "category": type,
      "text": this.toAdd.text,
      "is_fail": null || this.toAdd.is_fail,
      "is_success": null,
      "is_start": null,
      "type": null || this.toAdd.type,
      "choice": []
    };
    s = this.cookies.getAll();
    return this.Restangular.one('/api/v1/nodes/').post('', obj, '', {
      'X-CSRFToken': s.csrftoken
    }).then((function(_this) {
      return function(res) {
        _this.selected = res;
        return _this.save();
      };
    })(this));
  };

  treeModalCtrl.prototype.setFailure = function() {
    this.toAdd.is_fail = true;
    this.toAdd.is_success = null;
    return this.toAdd.type = 'failure';
  };

  treeModalCtrl.prototype.setSuccess = function() {
    this.toAdd.is_fail = null;
    this.toAdd.is_success = true;
    return this.toAdd.type = 'success';
  };

  treeModalCtrl.prototype.setDefault = function() {
    this.toAdd.is_fail = null;
    this.toAdd.is_success = null;
    return this.toAdd.type = '';
  };

  return treeModalCtrl;

})();

angular.module('app').component('modalComponent', {
  template: modalTpl(),
  bindings: {
    resolve: '<',
    close: '&',
    dismiss: '&'
  },
  controller: ['Restangular', '$cookies', treeModalCtrl]
});

// ---
// generated by coffee-script 1.9.2