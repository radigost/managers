/**
 * Created by user on 05.01.17.
 */
var Player,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Player = (function() {
  function Player(Restangular, localStorage, q) {
    this.Restangular = Restangular;
    this.localStorage = localStorage;
    this.q = q;
    this.succeed = bind(this.succeed, this);
    this.fail = bind(this.fail, this);
    this.choosePlayer = bind(this.choosePlayer, this);
    this.findCurrent = bind(this.findCurrent, this);
    this.findNode = bind(this.findNode, this);
    this.loadTree = bind(this.loadTree, this);
    this.loadNodes = bind(this.loadNodes, this);
    this.init = bind(this.init, this);
    this.type = 'player';
    this.name = "";
    this.fakeName = "Иван Иванович";
    this.company = "";
    this.money = "";
    this.position = "";
    this.nodes = [];
    this.tree = [];
  }

  Player.prototype.init = function() {
    this.id = this.localStorage.player.id;
    this.Restangular.one('api/v1/persons/', this.id).get().then((function(_this) {
      return function(res) {
        return _.extend(_this, res);
      };
    })(this));
  };

  Player.prototype.loadNodes = function() {
    var def;
    def = this.q.defer();
    this.Restangular.one('api/v1/nodes/player').get().then((function(_this) {
      return function(res) {
        _this.nodes = res;
        return def.resolve();
      };
    })(this));
    return def.promise;
  };

  Player.prototype.loadTree = function() {
    var def;
    def = this.q.defer();
    this.Restangular.one('api/v1/nodes/npc').get().then((function(_this) {
      return function(res) {
        _this.tree = res;
        return def.resolve();
      };
    })(this));
    return def.promise;
  };

  Player.prototype.findNode = function(questionId) {
    this.branch = _.find(this.tree, {
      id: questionId
    });
    if (this.branch) {
      this.questionArray = _.filter(this.nodes, (function(_this) {
        return function(element) {
          return _.includes(_this.branch.choice, element.id);
        };
      })(this));
      _.forEach(this.questionArray, (function(_this) {
        return function(element) {
          var name;
          if (element.text.indexOf("%USERNAME%")) {
            name = _this.name;
            return element.text = _.replace(element.text, '%USERNAME%', name);
          }
        };
      })(this));
      _.forEach(this.questionArray, (function(_this) {
        return function(element) {
          var name;
          if (element.text.indexOf("%FAKEUSERNAME%")) {
            name = _this.fakeName;
            return element.text = _.replace(element.text, '%FAKEUSERNAME%', name);
          }
        };
      })(this));
      return _.forEach(this.questionArray, (function(_this) {
        return function(element) {
          var name;
          if (element.text.indexOf("%LPRNAME%")) {
            name = "Михаила Сергеевича";
            element.text = _.replace(element.text, '%LPRNAME%', name);
            return _this.fakeName;
          }
        };
      })(this));
    } else {
      return this.questionArray = [];
    }
  };

  Player.prototype.findCurrent = function(questionId) {
    return this.current = _.find(this.nodes, {
      id: questionId
    });
  };

  Player.prototype.choosePlayer = function(playerAvatarID) {
    if (playerAvatarID) {
      return this.playerAvatarID = playerAvatarID;
    }
  };

  Player.prototype.fail = function() {
    return this.current = {
      id: null,
      text: "Эммм..ну до свиданья"
    };
  };

  Player.prototype.succeed = function() {
    return this.current = {
      id: null,
      text: "Да, спасибо большое"
    };
  };

  return Player;

})();

angular.module('app').service('Player', ['Restangular', '$localStorage', '$q', Player]);

module.exports = Player;

// ---
// generated by coffee-script 1.9.2